{"version":3,"sources":["constants.tsx","utils.tsx","NivoPie.tsx","NivoBar.tsx","assets/down-chevron.svg","OverallProjectView.tsx","NestorReporter.tsx","App.js","index.js"],"names":["development","qa","design","learning","documentation","meetings","others","tasktypesList","consolidateProjData","projData","names","map","x","resourcename","Set","tasktypes","taskType","returnData","forEach","nm","tt","taskList","filter","length","totalHours","reduce","acc","curr","Number","TotalHours","flattenProjData","massagedData","employee","dates","date","TasksList","task","oldTaskType","includes","employeeid","email","getRandomInt","arg","getTaskLabel","type","NivoPie","props","data","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderWidth","borderColor","from","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","modifiers","defs","id","background","color","size","padding","stagger","fill","match","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemTextColor","itemDirection","itemOpacity","symbolSize","symbolShape","effects","on","style","NivoBar","keys","indexBy","valueScale","indexScale","round","colors","scheme","rotation","lineWidth","spacing","axisTop","axisRight","enableLabel","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","role","ariaLabel","barAriaLabel","e","formattedValue","indexValue","OverallProjectView","projectList","sid","reqUrl","projectsList","setProjectsList","selectedProject","setSelectedProject","selectedProjectData","setSelectedProjectData","getTimeData","getOrgData","OverallDataState","useState","OverallTaskPieData","setOverallTaskPieData","OverallTaskTableData","setOverallTaskTableData","OverallTaskBarData","setOverallTaskBarData","useEffect","overalldataFlattenedForTaskType","hours","prj","prjData","xODFT","viewData","totalOverallHours","pieEleValue","find","percentval","toFixed","label","value","newData","databyTaskType","dataEle","dbtt","name","console","log","obj","position","className","dt","onClick","document","getElementById","scrollIntoView","behavior","block","inline","src","downChevron","alt","title","width","height","NestorReporter","setIsLoading","isLoading","MainViewState","setMainViewState","PiewViewSwitch","setPiewViewSwitch","selectedProjectDataView","setSelectedProjectDataView","selectedProjectPieView","setSelectedProjectPieView","selectedProjectPersonPieView","setSelectedProjectPersonPieView","status","totalTimeByResource","emp","Math","floor","random","refreshData","tempSelectProjList","a","Button","variant","disabled","FormControl","Select","labelId","projectId","onChange","event","val","target","catch","MenuItem","ToggleButtonGroup","exclusive","_prev","ToggleButton","App","setOverallDataState","tempSelectProj","axios","post","command","client","startDate","endDate","moment","format","individualProject","resTime","tempProjData","Array","restProjData","count","res","projects","getOverallData","Promise","all","AllRes","overallDataTemp","proj","index","prjdata","list","parentElement","children","i","localName","remove","rootElement","createRoot","render"],"mappings":"iQAAaA,EAAc,CACzB,wBACA,gBACA,SACA,MACA,YACA,uBACA,iBACA,aACA,cACA,kBACA,oBAEWC,EAAK,CAChB,iBACA,6BACA,oBACA,WAEWC,EAAS,CACpB,mBACA,kBACA,cACA,aACA,YACA,YACA,YACA,wBACA,eAEWC,EAAW,CACtB,YACA,eACA,OACA,aACA,iBACA,qBACA,gBACA,WACA,2BACA,sBAEWC,EAAgB,CAC3B,uBACA,gBACA,4BACA,mBACA,wBACA,uBACA,2BACA,0BACA,gBAEWC,EAAW,CACtB,UACA,mBACA,mBACA,gBAEWC,EAAS,CACpB,eACA,WACA,QACA,2BACA,WACA,uBACA,YACA,gBACA,eACA,UACA,qBACA,4BACA,iBACA,4BACA,+BACA,qBACA,iBACA,MACA,yBACA,qBACA,WACA,iEACA,aACA,gBACA,UACA,WACA,yBACA,qBACA,sBACA,cACA,4BACA,+CACA,QACA,yBACA,sBACA,uBACA,iBACA,mBACA,gBACA,gBAGWC,EAAgB,CAC3B,cACA,KACA,SACA,WACA,gBACA,WACA,UCpFWC,EAAsB,SAACC,GAClC,IAAIC,EAAQD,EAASE,KAAI,SAACC,GAAD,OAA+BA,EAAEC,gBAC1DH,EAAK,YAAO,IAAII,IAAIJ,IACpB,IAAIK,EAAYN,EAASE,KAAI,SAACC,GAAD,OAA2BA,EAAEI,YAC1DD,EAAS,YAAO,IAAID,IAAIC,IACxB,IAAIE,EAAoB,GAyBxB,OAxBAP,EAAMQ,SAAQ,SAACC,GACbJ,EAAUG,SAAQ,SAACE,GACjB,IAAIC,EAAWZ,EAASa,QACtB,SAACV,GAAD,OAA8CA,EAAEC,eAAiBM,GAAMP,EAAEI,WAAaI,KAExF,GAAIC,EAASE,OAAS,EAAG,CAEvB,IAAIC,EAAaH,EAASI,QACxB,SAACC,EAAaC,GAAd,OAA6CD,EAAME,OAAOD,EAAKE,cAC/D,GAGFZ,EAAU,sBACLA,GADK,CAER,CACEJ,aAAcM,EACdH,SAAUI,EACVS,WAAYL,YAOfP,GAGIa,EAAkB,SAACrB,GAC9B,IAAIsB,EAAsB,GAuB1B,OAtBAtB,EAASS,SAAQ,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","file":"static/js/main.35c43157.chunk.js","sourcesContent":["export const development = [\r\n  \"API Call Finalization\",\r\n  \"Build process\",\r\n  \"Coding\",\r\n  \"POC\",\r\n  \"Scripting\",\r\n  \"API Call Integration\",\r\n  \"Code Reforming\",\r\n  \"Bug Fixing\",\r\n  \"Code Review\",\r\n  \"Framework setup\",\r\n  \"HTML Integration\"\r\n];\r\nexport const qa = [\r\n  \"Manual Testing\",\r\n  \"Automated Test Development\",\r\n  \"Automated Testing\",\r\n  \"Testing\"\r\n];\r\nexport const design = [\r\n  \"Component Design\",\r\n  \"Design Analysis\",\r\n  \"Icon Design\",\r\n  \"Styleguide\",\r\n  \"UI Design\",\r\n  \"UI Review\",\r\n  \"UX Review\",\r\n  \"UX Review (Secondary)\",\r\n  \"Wireframing\"\r\n];\r\nexport const learning = [\r\n  \"Mentoring\",\r\n  \"Blog Writing\",\r\n  \"Blog\",\r\n  \"Bench Time\",\r\n  \"Document study\",\r\n  \"Knowledge Transfer\",\r\n  \"Self Learning\",\r\n  \"Training\",\r\n  \"Training and Development\",\r\n  \"Technical Guidance\"\r\n];\r\nexport const documentation = [\r\n  \"Design Documentation\",\r\n  \"Documentation\",\r\n  \"Interaction Documentation\",\r\n  \"Persona Creation\",\r\n  \"Research and Analysis\",\r\n  \"Review Documentation\",\r\n  \"Styleguide Documentation\",\r\n  \"Test Case Documentation\",\r\n  \"User Support\"\r\n];\r\nexport const meetings = [\r\n  \"Meeting\",\r\n  \"Company Meetings\",\r\n  \"Project Meetings\",\r\n  \"Presentation\"\r\n];\r\nexport const others = [\r\n  \"Actual Event\",\r\n  \"Analysis\",\r\n  \"Audit\",\r\n  \"Bank & cash Transactions\",\r\n  \"Branding\",\r\n  \"Business Development\",\r\n  \"Comp Time\",\r\n  \"Company Event\",\r\n  \"Coordination\",\r\n  \"Content\",\r\n  \"Content Management\",\r\n  \"Content Management Review\",\r\n  \"Content Review\",\r\n  \"Employee Exit Formalities\",\r\n  \"Employee Joining Formalities\",\r\n  \"Event Coordination\",\r\n  \"Event Planning\",\r\n  \"GST\",\r\n  \"General Administration\",\r\n  \"Grievance Handling\",\r\n  \"Invoices\",\r\n  \"Miscellaneous (Clutch, events, collaboration with finance etc)\",\r\n  \"Monitoring\",\r\n  \"P.F, P.I, ESI\",\r\n  \"Payroll\",\r\n  \"Payslips\",\r\n  \"Performance Management\",\r\n  \"Project Management\",\r\n  \"Project estimations\",\r\n  \"Recruitment\",\r\n  \"Recruitment and Selection\",\r\n  \"Reviews (Mid Year)  & One-to-one Discussions\",\r\n  \"Sales\",\r\n  \"Sales Cycle Management\",\r\n  \"Schedule Management\",\r\n  \"Social Media Content\",\r\n  \"System Support\",\r\n  \"TDS & Income tax\",\r\n  \"User Analysis\",\r\n  \"User Support\"\r\n];\r\n\r\nexport const tasktypesList = [\r\n  \"development\",\r\n  \"qa\",\r\n  \"design\",\r\n  \"learning\",\r\n  \"documentation\",\r\n  \"meetings\",\r\n  \"others\"]","import {\r\n  development,\r\n  qa,\r\n  design,\r\n  learning,\r\n  documentation,\r\n  meetings,\r\n  others\r\n} from \"./constants\";\r\n\r\nexport const getNewTaskType = (oldTaskType: string) => {\r\n  if (development.includes(oldTaskType)) return \"development\";\r\n  else if (qa.includes(oldTaskType)) return \"qa\";\r\n  else if (design.includes(oldTaskType)) return \"design\";\r\n  else if (learning.includes(oldTaskType)) return \"learning\";\r\n  else if (documentation.includes(oldTaskType)) return \"documentation\";\r\n  else if (meetings.includes(oldTaskType)) return \"meetings\";\r\n  else if (others.includes(oldTaskType)) return \"others\";\r\n  else return `unknown-${oldTaskType}`;\r\n};\r\n\r\nexport const getRandomIntNM = () => {\r\n  return Math.floor(Math.random() * 360)\r\n}\r\n\r\nexport const consolidateProjData = (projData: any[]) => {\r\n  let names = projData.map((x: { resourcename: any; }) => x.resourcename);\r\n  names = [...new Set(names)];\r\n  let tasktypes = projData.map((x: { taskType: any; }) => x.taskType);\r\n  tasktypes = [...new Set(tasktypes)];\r\n  let returnData: any[] = [];\r\n  names.forEach((nm: any) => {\r\n    tasktypes.forEach((tt: any) => {\r\n      let taskList = projData.filter(\r\n        (x: { resourcename: any; taskType: any; }) => x.resourcename === nm && x.taskType === tt\r\n      );\r\n      if (taskList.length > 0) {\r\n        // console.log(taskList);\r\n        let totalHours = taskList.reduce(\r\n          (acc: number, curr: { TotalHours: any; }) => acc + Number(curr.TotalHours),\r\n          0\r\n        );\r\n        // console.log(totalHours);\r\n        returnData = [\r\n          ...returnData,\r\n          {\r\n            resourcename: nm,\r\n            taskType: tt,\r\n            TotalHours: totalHours\r\n          }\r\n        ];\r\n      }\r\n    });\r\n  });\r\n\r\n  return returnData;\r\n};\r\n\r\nexport const flattenProjData = (projData: any[]) => {\r\n  let massagedData: any[] = [];\r\n  projData.forEach((employee: { dates: any[]; employeeid: any; resourcename: any; email: any; }) => {\r\n    if (employee.dates && employee.dates.length > 0) {\r\n      employee.dates.forEach((date: { TasksList: any[]; }) => {\r\n        if (date.TasksList && date.TasksList.length > 0) {\r\n          date.TasksList.forEach((task: { taskType: string; }) => {\r\n            massagedData = [\r\n              ...massagedData,\r\n              {\r\n                ...task,\r\n                taskType: getNewTaskType(task.taskType),\r\n                employeeid: employee.employeeid,\r\n                resourcename: employee.resourcename,\r\n                email: employee.email\r\n              }\r\n            ];\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n  // console.log(massagedData);\r\n\r\n  return massagedData;\r\n};\r\n\r\nexport const getRandomInt = (arg: string) => {\r\n  if (arg === \"development\") {\r\n    return 0;\r\n  }\r\n  if (arg === \"qa\") {\r\n    return 60;\r\n  }\r\n  if (arg === \"design\") {\r\n    return 120;\r\n  }\r\n  if (arg === \"learning\") {\r\n    return 180;\r\n  }\r\n  if (arg === \"documentation\") {\r\n    return 90;\r\n  }\r\n  if (arg === \"meetings\") {\r\n    return 240;\r\n  }\r\n  if (arg === \"others\") {\r\n    return 340;\r\n  }\r\n};\r\n\r\nexport const getTaskLabel = (type: string) => {\r\n  if (type === \"development\") return \"Development\";\r\n  if (type === \"qa\") return \"Quality Assuarance\";\r\n  if (type === \"design\") return \"Design\";\r\n  if (type === \"learning\") return \"Learning\";\r\n  if (type === \"documentation\") return \"Documentation\";\r\n  if (type === \"meetings\") return \"Meetings\";\r\n  if (type === \"others\") return \"Others\";\r\n}","// install (please make sure versions match peerDependencies)\r\n// yarn add @nivo/core @nivo/pie\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\nexport const NivoPie = (props: any) => {\r\n  const { data } = props;\r\n  return (\r\n    <ResponsivePie\r\n      data={data}\r\n      margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n      innerRadius={0.5}\r\n      padAngle={0.7}\r\n      cornerRadius={3}\r\n      activeOuterRadiusOffset={8}\r\n      borderWidth={1}\r\n      borderColor={{\r\n        from: \"color\"\r\n        // modifiers: [[\"darker\", 0.2]]\r\n      }}\r\n      arcLinkLabelsSkipAngle={10}\r\n      arcLinkLabelsTextColor=\"#333333\"\r\n      arcLinkLabelsThickness={2}\r\n      arcLinkLabelsColor={{ from: \"color\" }}\r\n      arcLabelsSkipAngle={10}\r\n      arcLabelsTextColor={{\r\n        from: \"color\",\r\n        modifiers: [[\"darker\", 2]]\r\n      }}\r\n      defs={[\r\n        {\r\n          id: \"dots\",\r\n          type: \"patternDots\",\r\n          background: \"inherit\",\r\n          color: \"rgba(255, 255, 255, 0.3)\",\r\n          size: 0,\r\n          padding: 1,\r\n          stagger: true\r\n        }\r\n      ]}\r\n      fill={data.map((x) => ({\r\n        match: {\r\n          id: x.id\r\n        },\r\n        id: \"dots\"\r\n      }))}\r\n      legends={[\r\n        {\r\n          anchor: \"top-right\",\r\n          direction: \"column\",\r\n          justify: false,\r\n          translateX: 60,\r\n          translateY: 0,\r\n          itemsSpacing: 0.75,\r\n          itemWidth: 100,\r\n          itemHeight: 18,\r\n          itemTextColor: \"#999\",\r\n          itemDirection: \"left-to-right\",\r\n          itemOpacity: 1,\r\n          symbolSize: 18,\r\n          symbolShape: \"circle\",\r\n          effects: [\r\n            {\r\n              on: \"hover\",\r\n              style: {\r\n                itemTextColor: \"#000\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n};\r\n","// install (please make sure versions match peerDependencies)\r\n// yarn add @nivo/core @nivo/bar\r\nimport { ResponsiveBar } from '@nivo/bar'\r\nimport { tasktypesList } from './constants'\r\n\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\nexport const NivoBar = (props: { data: any[] }) => {\r\n\r\n    const { data } = props\r\n\r\n    return (\r\n        <ResponsiveBar\r\n            data={data}\r\n            keys={tasktypesList}\r\n            indexBy=\"label\"\r\n            margin={{ top: 34, right: 130, bottom: 300, left: 60 }}\r\n            padding={0.2}\r\n            valueScale={{ type: 'linear' }}\r\n            indexScale={{ type: 'band', round: true }}\r\n            colors={{ scheme: 'nivo' }}\r\n            defs={[\r\n                {\r\n                    id: 'dots',\r\n                    type: 'patternDots',\r\n                    background: 'inherit',\r\n                    color: '#38bcb2',\r\n                    size: 4,\r\n                    padding: 1,\r\n                    stagger: true\r\n                },\r\n                {\r\n                    id: 'lines',\r\n                    type: 'patternLines',\r\n                    background: 'inherit',\r\n                    color: '#eed312',\r\n                    rotation: -45,\r\n                    lineWidth: 6,\r\n                    spacing: 10\r\n                }\r\n            ]}\r\n            fill={[\r\n                {\r\n                    match: {\r\n                        id: 'qa'\r\n                    },\r\n                    id: 'dots'\r\n                },\r\n                {\r\n                    match: {\r\n                        id: 'design'\r\n                    },\r\n                    id: 'lines'\r\n                }\r\n            ]}\r\n            borderColor={{\r\n                from: 'color',\r\n                modifiers: [\r\n                    [\r\n                        'darker',\r\n                        1.6\r\n                    ]\r\n                ]\r\n            }}\r\n            axisTop={null}\r\n            axisRight={null}\r\n            enableLabel={false}\r\n            axisBottom={{\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 90,\r\n                legend: 'Project',\r\n                legendPosition: 'middle',\r\n                legendOffset: 200,\r\n                // renderTick: (props) => {\r\n                //     console.log(props)\r\n                //     return (\r\n                //         <g className='custom-bottom-tick' transform={`translate(${props.x}, ${props.y - 200})`} style={{ opacity: props.opacity, zIndex: 21478 }}>\r\n                //             <text transform={`translate(0,0) rotate(${props.rotate})`} style={{fontSize: 10}}>{props.value}</text>\r\n                //         </g>\r\n                //     )\r\n                // }\r\n            }}\r\n            axisLeft={{\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'Hours',\r\n                legendPosition: 'middle',\r\n                legendOffset: -40\r\n            }}\r\n            labelSkipWidth={12}\r\n            labelSkipHeight={12}\r\n            labelTextColor={{\r\n                from: 'color',\r\n                modifiers: [\r\n                    [\r\n                        'darker',\r\n                        1.6\r\n                    ]\r\n                ]\r\n            }}\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'top-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n            role=\"application\"\r\n            ariaLabel=\"Nivo bar chart demo\"\r\n            barAriaLabel={function (e) { return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue }}\r\n        />\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/down-chevron.4b6ccfa3.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport { tasktypesList } from \"./constants\";\r\nimport { NivoPie } from \"./NivoPie\";\r\nimport { getRandomInt, getTaskLabel } from \"./utils\";\r\nimport \"./styles.css\";\r\nimport { NivoBar } from \"./NivoBar\";\r\nimport downChevron from \"./assets/down-chevron.svg\"\r\n\r\nexport const OverallProjectView = (props: any) => {\r\n    const {\r\n        projectList,\r\n        sid,\r\n        reqUrl,\r\n        projectsList,\r\n        setProjectsList,\r\n        selectedProject,\r\n        setSelectedProject,\r\n        selectedProjectData,\r\n        setSelectedProjectData,\r\n        getTimeData,\r\n        getOrgData,\r\n        OverallDataState\r\n    } = props;\r\n\r\n    const [OverallTaskPieData, setOverallTaskPieData] = useState<any>([])\r\n    const [OverallTaskTableData, setOverallTaskTableData] = useState<any>([])\r\n    const [OverallTaskBarData, setOverallTaskBarData] = useState<any>([])\r\n    const [ScrolledIntoView, setScrolledIntoView] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        if (OverallDataState.length > 0) {\r\n            let overalldataFlattenedForTaskType = tasktypesList.map((x) => ({ type: x, hours: 0 }));\r\n            OverallDataState.forEach((prj: any) => {\r\n                if (prj.data && prj.data.length) {\r\n                    prj.data.forEach((prjData: any) => {\r\n                        overalldataFlattenedForTaskType =\r\n                            overalldataFlattenedForTaskType.map((xODFT: any) =>\r\n                                xODFT.type === prjData.taskType ?\r\n                                    { ...xODFT, hours: xODFT.hours + Number(prjData.TotalHours) }\r\n                                    : xODFT)\r\n                    })\r\n                }\r\n            });\r\n            let viewData: any[] = [];\r\n            let tasktypes: any[] = tasktypesList;\r\n\r\n            const totalOverallHours = overalldataFlattenedForTaskType.reduce((acc, curr) => acc + Number(curr.hours), 0)\r\n\r\n            tasktypes.forEach((tt: any) => {\r\n\r\n                const pieEleValue = overalldataFlattenedForTaskType.find((x) => x.type === tt)?.hours\r\n                const percentval = pieEleValue ? Number((pieEleValue / totalOverallHours) * 100).toFixed(2) : \"0.00\"\r\n                viewData = [\r\n                    ...viewData,\r\n                    {\r\n                        id: `${getTaskLabel(tt)} (${percentval}%)`,\r\n                        label: getTaskLabel(tt),\r\n                        value: Number(pieEleValue).toFixed(2),\r\n                        color: `hsl(${getRandomInt(tt)}, 70%, 50%)`\r\n                    }\r\n                ];\r\n            });\r\n            setOverallTaskPieData(() => [...viewData]);\r\n        }\r\n    }, [OverallDataState])\r\n\r\n    useEffect(() => {\r\n        if (OverallDataState.length > 0) {\r\n            let newData: any[] = [];\r\n            OverallDataState.forEach((prj: any) => {\r\n                let databyTaskType = tasktypesList.map((x) => ({ type: x, hours: 0 }));\r\n                if (prj.data && prj.data.length > 0) {\r\n                    prj.data.forEach((dataEle: any) => {\r\n                        databyTaskType = databyTaskType.map((dbtt: any) => dbtt.type === dataEle.taskType ? { ...dbtt, hours: dbtt.hours + Number(dataEle.TotalHours) } : dbtt)\r\n                    })\r\n                }\r\n                newData = [...newData,\r\n                {\r\n                    name: prj.name,\r\n                    type: \"\",\r\n                    hours: Number(databyTaskType.reduce((acc, curr) => acc + Number(curr.hours), 0)).toFixed(2),\r\n                },\r\n                ...databyTaskType.map((dbtt) => ({\r\n                    name: \"\",\r\n                    ...dbtt\r\n                }))\r\n                ]\r\n            })\r\n            console.log(newData)\r\n            setOverallTaskTableData(() => [...newData])\r\n        }\r\n    }, [OverallDataState])\r\n    useEffect(() => {\r\n        if (OverallDataState.length > 0) {\r\n            let newData: any[] = [];\r\n            OverallDataState.forEach((prj: any) => {\r\n                let databyTaskType = tasktypesList.map((x) => ({ type: x, hours: 0 }));\r\n                if (prj.data && prj.data.length > 0) {\r\n                    prj.data.forEach((dataEle: any) => {\r\n                        databyTaskType = databyTaskType.map((dbtt: any) => dbtt.type === dataEle.taskType ? { ...dbtt, hours: dbtt.hours + Number(dataEle.TotalHours) } : dbtt)\r\n                    })\r\n                }\r\n                let obj = { label: prj.name }\r\n                databyTaskType.forEach((x: any) => {\r\n                    obj = { ...obj, [x.type]: Number(x.hours).toFixed(2) }\r\n                })\r\n                newData = [...newData, obj]\r\n            })\r\n            console.log(\"setOverallTaskBarData => \", newData)\r\n            setOverallTaskBarData(() => [...newData])\r\n        }\r\n    }, [OverallDataState])\r\n\r\n    return (\r\n        <div style={{ position: \"relative\" }}>\r\n\r\n            <div className=\"overall-view-container\">\r\n                <div className=\"overall-table-view\">\r\n                    <div className=\"table\">\r\n                        <div className=\"grid table_header\">\r\n                            <div className=\"header\">{\"Name\"}</div>\r\n                            <div className=\"header\">{\"Category\"}</div>\r\n                            <div className=\"header\">{\"Time\"}</div>\r\n                        </div>\r\n                        {OverallTaskTableData.length > 0 &&\r\n                            OverallTaskTableData.map((dt: any) => (\r\n                                <div className={`grid ${dt.name ? 'grid-border-top' : ''}`}>\r\n                                    <div>{dt.name}</div>\r\n                                    <div>{getTaskLabel(dt.type)}</div>\r\n                                    <div>{Number(dt.hours).toFixed(2)}</div>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"overall-pie-view\">\r\n                    {OverallTaskPieData.length > 0 && (\r\n                        <NivoPie data={OverallTaskPieData} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className=\"scroll-btn\" onClick={() => {\r\n                document.getElementById(\"overall-bar-graph\")?.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" })\r\n            }} >\r\n                <span>Click to see all projects</span>\r\n                <img src={downChevron} alt=\"Scroll\" title=\"Scroll to bottom\" />\r\n            </div>\r\n            {OverallTaskBarData.length > 0 && (\r\n                <div id=\"overall-bar-graph\">\r\n                    <div style={{ width: `100%`, height: \"768px\" }}>\r\n                        <NivoBar data={OverallTaskBarData} />\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </div >\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { getRandomInt, getRandomIntNM, getTaskLabel } from \"./utils\";\r\nimport \"./styles.css\";\r\nimport { NivoPie } from \"./NivoPie\";\r\nimport { Button, FormControl, MenuItem, Select } from \"@material-ui/core\";\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\n\r\nimport { OverallProjectView } from \"./OverallProjectView\";\r\n\r\nexport const NestorReporter = (props: any) => {\r\n  const {\r\n    projectsList,\r\n    setProjectsList,\r\n    selectedProject,\r\n    setSelectedProject,\r\n    selectedProjectData,\r\n    setSelectedProjectData,\r\n    getTimeData,\r\n    getOrgData,\r\n    isLoading,\r\n    setIsLoading,\r\n    sid,\r\n    reqUrl,\r\n  } = props;\r\n  const [MainViewState, setMainViewState] = useState<string>(\"projectView\");\r\n  const [PiewViewSwitch, setPiewViewSwitch] = useState<string>(\"task\");\r\n  const [selectedProjectDataView, setSelectedProjectDataView] = useState<any>([]);\r\n  const [selectedProjectPieView, setSelectedProjectPieView] = useState<any>([]);\r\n  const [selectedProjectPersonPieView, setSelectedProjectPersonPieView] = useState<any>([]);\r\n\r\n  useEffect(() => {\r\n    setSelectedProject([{ ...projectsList.filter((x: { status: string; }) => x.status === \"Active\")[0] }]);\r\n    setSelectedProjectData([]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedProjectData.length > 0) {\r\n      let viewData: any[] = [];\r\n      let names: any[] = selectedProjectData.map((x: { resourcename: any; }) => x.resourcename);\r\n      names = [...(new Set(names))];\r\n      let tasktypes: any[] = selectedProjectData.map((x: { taskType: any; }) => x.taskType);\r\n      tasktypes = [...(new Set(tasktypes))];\r\n\r\n      names.forEach((nm: any) => {\r\n        let totalTimeByResource = selectedProjectData\r\n          .filter((x: { resourcename: any; }) => x.resourcename === nm)\r\n          .reduce((acc: number, curr: { TotalHours: any; }) => acc + Number(curr.TotalHours), 0);\r\n        viewData = [\r\n          ...viewData,\r\n          {\r\n            resourcename: nm,\r\n            taskType: \"\",\r\n            // TotalHours: `Total Time: ${totalTimeByResource}`\r\n            TotalHours: totalTimeByResource\r\n          }\r\n        ];\r\n\r\n        tasktypes.forEach((tt: any) => {\r\n          let emp = selectedProjectData.find(\r\n            (x: { resourcename: any; taskType: any; }) => x.resourcename === nm && x.taskType === tt\r\n          );\r\n          if (emp) {\r\n            viewData = [\r\n              ...viewData,\r\n              {\r\n                resourcename: \"\",\r\n                taskType: getTaskLabel(tt),\r\n                TotalHours: emp.TotalHours\r\n              }\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      setSelectedProjectDataView(() => [...viewData]);\r\n    }\r\n  }, [selectedProjectData]);\r\n  useEffect(() => {\r\n    if (selectedProjectData.length > 0) {\r\n      let viewData: any[] = [];\r\n      let tasktypes: any[] = selectedProjectData.map((x: { taskType: any; }) => x.taskType);\r\n      tasktypes = [...(new Set(tasktypes))];\r\n      // console.log(selectedProjectData)\r\n      tasktypes.forEach((tt: any) => {\r\n        viewData = [\r\n          ...viewData,\r\n          {\r\n            id: getTaskLabel(tt),\r\n            label: getTaskLabel(tt),\r\n            value: Number(\r\n              selectedProjectData\r\n                .filter((x: { taskType: any; }) => x.taskType === tt)\r\n                .reduce((acc: number, curr: { TotalHours: any; }) => acc + Number(curr.TotalHours), 0)\r\n            ).toFixed(2),\r\n            color: `hsl(${getRandomInt(tt)}, 70%, 50%)`\r\n          }\r\n        ];\r\n      });\r\n      setSelectedProjectPieView(() => [...viewData]);\r\n    }\r\n  }, [selectedProjectData]);\r\n  useEffect(() => {\r\n    if (selectedProjectData.length > 0) {\r\n      let viewData: any[] = [];\r\n      let names: any[] = selectedProjectData.map((x: { resourcename: any; }) => x.resourcename);\r\n      names = [...(new Set(names))];\r\n      // console.log(selectedProjectData)\r\n      names.forEach((nm: any) => {\r\n        viewData = [\r\n          ...viewData,\r\n          {\r\n            id: nm,\r\n            label: nm,\r\n            value: Number(\r\n              selectedProjectData\r\n                .filter((x: { resourcename: any; }) => x.resourcename === nm)\r\n                .reduce((acc: number, curr: { TotalHours: any; }) => acc + Number(curr.TotalHours), 0)\r\n            ).toFixed(2),\r\n            color: `hsl(${getRandomIntNM()}, 70%, 50%)`\r\n          }\r\n        ];\r\n      });\r\n      setSelectedProjectPersonPieView(() => [...viewData]);\r\n    }\r\n  }, [selectedProjectData]);\r\n\r\n  const refreshData = async (tempSelectProjList: any[]) => {\r\n    try {\r\n      setIsLoading(true);\r\n      await getTimeData(tempSelectProjList[0]);\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  const onSelectProject = (event: { target: { value: any; }; }) => {\r\n    const val = event.target.value;\r\n    let tempSelectProjList = projectsList.filter((x: { projectId: any; }) => x.projectId === val);\r\n    setSelectedProject(() => [...tempSelectProjList]);\r\n    refreshData(tempSelectProjList).catch();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"select-header\">\r\n        <div className=\"header-btn\">\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"outlined\"\r\n            onClick={() => setMainViewState(\"overallView\")}\r\n            disabled={MainViewState === \"overallView\"}\r\n          >\r\n            {\"Overall View\"}\r\n          </Button>\r\n        </div>\r\n        <div className=\"header-btn\">\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"outlined\"\r\n            onClick={() => setMainViewState(\"projectView\")}\r\n            disabled={MainViewState === \"projectView\"}\r\n          >\r\n            {\"Project View\"}\r\n          </Button>\r\n        </div>\r\n        <FormControl className=\"select-project\">\r\n          {MainViewState === \"projectView\" &&\r\n            <Select\r\n              variant=\"outlined\"\r\n              labelId=\"select-project-label\"\r\n              id=\"select-project\"\r\n              value={selectedProject.length > 0 ? selectedProject[0].projectId : \"\"}\r\n              // label=\"Select Project\"\r\n              onChange={onSelectProject}\r\n            >\r\n              {projectsList\r\n                .filter((x: { status: string; }) => x.status === \"Active\")\r\n                .map((x: any) => (\r\n                  <MenuItem value={x.projectId}>{x.name}</MenuItem>\r\n                ))}\r\n            </Select>}\r\n        </FormControl>\r\n      </div>\r\n      {/* <div>{selectedProject.length === 1 && selectedProject[0].name}</div> */}\r\n      {MainViewState === \"overallView\" &&\r\n        <OverallProjectView\r\n          projectList={projectsList}\r\n          sid={sid}\r\n          reqUrl={reqUrl}\r\n          {...props}\r\n        />}\r\n      {MainViewState === \"projectView\" && (\r\n        <div className=\"view__data\">\r\n          {/**TABLE */}\r\n          <div className=\"table overall-table-view\">\r\n            <div className=\"grid table_header\">\r\n              <div className=\"header\">{\"Name\"}</div>\r\n              <div className=\"header\">{\"Category\"}</div>\r\n              <div className=\"header\">{\"Time\"}</div>\r\n            </div>\r\n            {selectedProjectDataView.length > 0 &&\r\n              selectedProjectDataView.map((dt: any) => (\r\n                <div className={`grid ${dt.resourcename ? 'grid-border-top' : ''}`}>\r\n                  <div>{dt.resourcename}</div>\r\n                  <div>{dt.taskType}</div>\r\n                  <div>{Number(dt.TotalHours).toFixed(2)}</div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          {/**PIE CHART */}\r\n          <div className=\"ChartContainer\">\r\n            <ToggleButtonGroup\r\n              color=\"primary\"\r\n              value={PiewViewSwitch}\r\n              exclusive\r\n              onChange={(e) => {\r\n                setPiewViewSwitch((_prev: string) => e.target.value)\r\n              }}\r\n            >\r\n              <ToggleButton value=\"task\">Task</ToggleButton>\r\n              <ToggleButton value=\"person\">Person</ToggleButton>\r\n            </ToggleButtonGroup>\r\n            {PiewViewSwitch === \"task\" && (<div className=\"Chart\">\r\n              {selectedProjectPieView.length > 0 && (\r\n                <NivoPie data={selectedProjectPieView} />\r\n              )}\r\n            </div>\r\n            )}\r\n            {PiewViewSwitch === \"person\" && (\r\n              <div className=\"Chart\">\r\n                {selectedProjectPersonPieView.length > 0 && (\r\n                  <NivoPie data={selectedProjectPersonPieView} />\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\nimport moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { InfinitySpin } from \"react-loader-spinner\";\nimport { NestorReporter } from \"./NestorReporter\";\nimport \"./styles.css\";\nimport { consolidateProjData, flattenProjData } from \"./utils\";\n\n\nconst sid = \"h700c2qthusq2itics4covhgs1\";\nconst reqUrl = \"https://nestor.divami.com/request.php\";\nexport default function App() {\n\n  const [projectsList, setProjectsList] = useState([]);\n  const [selectedProject, setSelectedProject] = useState([]);\n  const [selectedProjectData, setSelectedProjectData] = useState([]);\n  const [OverallDataState, setOverallDataState] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n\n  const getTimeData = async (tempSelectProj) => {\n    try {\n      // setIsLoading(true);\n      const resTime = await axios.post(reqUrl, {\n        command: \"getProjectTimesheet\",\n        client: { sid },\n        data: {\n          projectId: tempSelectProj.projectId, // \"1\"\n          startDate: \"2016-01-01\",\n          endDate: moment().format(\"YYYY-MM-DD\"),\n          individualProject: true\n        }\n      });\n      if (resTime.data && resTime.data.data) {\n        const tempProjData = Array.from(resTime.data.data);\n        let restProjData = flattenProjData(tempProjData);\n        restProjData = consolidateProjData(restProjData);\n        setSelectedProjectData(restProjData);\n      } else throw resTime;\n      // setIsLoading(false);\n    } catch (err) {\n      // setIsLoading(false);\n      console.log(\"getTImeData err=>\", err);\n    }\n  };\n\n  const getOrgData = async () => {\n    try {\n      // setIsLoading(true);\n      const res = await axios.post(reqUrl, {\n        command: \"getProjectList\",\n        client: { sid },\n        data: { count: 999 }\n      });\n      if (res.data && res.data.data && res.data.data?.projects) {\n        const projects = Array.from(res?.data?.data?.projects);\n        // console.log(\"fetched ProjectList\", projects);\n        setProjectsList(projects);\n        let tempSelectProj = projects.filter((x) => x.status === \"Active\")?.[0];\n        setSelectedProject(() => [tempSelectProj]);\n        await getTimeData(tempSelectProj);\n      } else throw res;\n      // setIsLoading(false);\n    } catch (err) {\n      // setIsLoading(false);\n      console.log(\"getOrgData err => \", err);\n    }\n  };\n\n  const getOverallData = async () => {\n    try {\n      setIsLoading(true);\n\n      const AllRes = await Promise.all(\n        projectsList\n          .filter(\n            x =>\n              x.status === \"Active\" && x.projectId !== \"1\"\n          )\n          .map(\n            prj =>\n              axios.post(reqUrl, {\n                command: \"getProjectTimesheet\",\n                client: { sid },\n                data: {\n                  projectId: prj.projectId, // \"1\"\n                  startDate: \"2000-01-01\",\n                  endDate: moment().format(\"YYYY-MM-DD\"),\n                  individualProject: true\n                }\n              })))\n      let overallDataTemp = projectsList\n        .filter(\n          x =>\n            x.status === \"Active\" && x.projectId !== \"1\"\n        ).map((proj, index) => {\n          let prjdata = AllRes[index] &&\n            AllRes[index].data &&\n            AllRes[index].data.data ?\n            AllRes[index].data.data :\n            []\n          prjdata = flattenProjData(prjdata);\n          prjdata = consolidateProjData(prjdata);\n          return {\n            ...proj,\n            data: prjdata\n          }\n        })\n\n      // console.log(overallDataTemp)\n      setOverallDataState(overallDataTemp)\n      setIsLoading(false);\n    } catch (err) {\n      setIsLoading(false);\n      console.log(\"getOverallData Error=>\", err);\n    }\n  }\n\n  useEffect(() => {\n    if (projectsList.length > 0) { getOverallData().catch() }\n    var list = document.getElementById(\"root\").parentElement.children\n    for (var i = 0; i < list.length; i++) {\n      if (list[i].localName === \"iframe\") list[i].remove()\n    }\n  }, [projectsList])\n\n  useEffect(() => {\n    getOrgData().catch();\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      {isLoading && (\n        <div className=\"loader\">\n          <InfinitySpin color=\"#ff1400\" width=\"200px\" />\n        </div>\n      )}\n      {projectsList.length > 0 && (\n        <NestorReporter\n          projectsList={projectsList}\n          setProjectsList={setProjectsList}\n          selectedProject={selectedProject}\n          setSelectedProject={setSelectedProject}\n          selectedProjectData={selectedProjectData}\n          setSelectedProjectData={setSelectedProjectData}\n          getTimeData={getTimeData}\n          getOrgData={getOrgData}\n          setIsLoading={setIsLoading}\n          sid={sid}\n          reqUrl={reqUrl}\n          OverallDataState={OverallDataState}\n        />\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}